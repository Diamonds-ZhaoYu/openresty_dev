# Copyright (C) 2017-2018 by chrono

lua_shared_dict limit_req_store 10m;

server {
    listen 87
        backlog=4096
        deferred
        reuseport
        fastopen=1024   # Old linux kernel may not support this
        ;

    server_name  *.*;

    access_log  logs/security_access.log
                main buffer=2k flush=1s;

    allow 127.0.0.1;
    deny all;

    default_type text/html;

    location /gc {
        content_by_lua_block {
            ngx.say(string.format("GC: %dKB", collectgarbage("count")))
        }
    }

    location / {

        access_by_lua_block {
            local limit_req = require "resty.limit.req"

            if not package.loaded.lim then
                local lim, err = limit_req.new("limit_req_store", 10, 5)
                package.loaded.lim = lim
            end

            local lim = package.loaded.lim

            local key = ngx.var.binary_remote_addr
            local delay, err = lim:incoming(key, true)
            if not delay then
                if err == "reject" then
                    return ngx.exit(503)
                end
                return ngx.exit(500)
            end

            ngx.log(ngx.ERR, "delay = ", delay)
            if delay > 0 then
                ngx.sleep(delay)
            end
        }

        content_by_lua_block {
            ngx.say("hello openresty")
        }
    }
}

